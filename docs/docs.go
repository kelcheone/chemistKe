// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "ChemistKe Support",
            "url": "https://chemist.co.ke/support",
            "email": "Support@chemist.co.ke"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticates a user and returns a JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authservice.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully authenticated",
                        "schema": {
                            "$ref": "#/definitions/authservice.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid input",
                        "schema": {
                            "$ref": "#/definitions/authservice.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/authservice.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/authservice.ErrResponse"
                        }
                    }
                }
            }
        },
        "/products": {
            "get": {
                "description": "Get products based on page and limit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get products",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PaginationRequest Page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "PaginationRequest Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/routes.Product"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Creates a new Product",
                "parameters": [
                    {
                        "description": "Product information to create",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.Product"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/routes.Product"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "update a given product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update a  product",
                "parameters": [
                    {
                        "description": "Product information to create",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.Product"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/routes.Product"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            }
        },
        "/products/get-products-by-brand": {
            "get": {
                "description": "Get products based on a given brand name",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get products based on brand",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ProductReq Brand",
                        "name": "brand",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ProductReq Page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ProductReq Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/routes.Product"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            }
        },
        "/products/get-products-by-category": {
            "get": {
                "description": "Get products based on a givne Category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get products Based on a category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ProductReq Category",
                        "name": "category",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ProductReq Page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ProductReq Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/routes.Product"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            }
        },
        "/products/get-products-by-sub-category": {
            "get": {
                "description": "Get products based on a given sub-category, page, and limit",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get products based on a sub-category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ProductReq SubCategory",
                        "name": "sub-category",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ProductReq Page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ProductReq Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/routes.Product"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            }
        },
        "/products/images/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload an image for a given product using multipart/form-data.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Upload a product image",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "product-id",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Type of the image (e.g. thumbnail, banner, general)",
                        "name": "image-type",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Image file to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully uploaded image",
                        "schema": {
                            "$ref": "#/definitions/product_proto.UploadProdctImagesResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrResponse"
                        }
                    }
                }
            }
        },
        "/products/images/{id}": {
            "get": {
                "description": "Get the images of a given product id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "a product's images",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/routes.Product"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            }
        },
        "/products/{id}": {
            "get": {
                "description": "Get a product by product ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/routes.Product"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a product based on a given id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/routes.Product"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a list of all users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get all users",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PaginationRequest Page",
                        "name": "page",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "PaginationRequest Limit",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/routes.GetUserResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "Register a new user to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User information to create",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created user",
                        "schema": {
                            "$ref": "#/definitions/routes.GetUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete an existing user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "description": "User ID to delete",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.User"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Successfully deleted user",
                        "schema": {
                            "$ref": "#/definitions/routes.DeleteUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.ErrResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update existing user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update user details",
                "parameters": [
                    {
                        "description": "Updated user information",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/routes.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user",
                        "schema": {
                            "$ref": "#/definitions/routes.GetUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/get-user": {
            "get": {
                "description": "Get user details by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/routes.GetUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            }
        },
        "/users/get-user-by-email": {
            "get": {
                "description": "Get user details by email address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get a user by email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Email",
                        "name": "email",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/routes.GetUserResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/routes.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "authservice.ErrResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Error message",
                    "type": "string",
                    "example": "invalid credentials"
                }
            }
        },
        "authservice.LoginRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "User ID",
                    "type": "string",
                    "example": "1bf447b8-a129-42a2-b11e-684a801568ff"
                },
                "password": {
                    "description": "User password",
                    "type": "string",
                    "example": "securepassword123"
                }
            }
        },
        "authservice.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "JWT authentication token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "product_proto.UploadProdctImagesResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "routes.DeleteUserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User deleted successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "routes.ErrResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "routes.GetUserResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jane.doe@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "cef6ad-1b39-4708-aa3f-a0c485f70db3"
                },
                "name": {
                    "type": "string",
                    "example": "Jane Doe"
                },
                "phone": {
                    "type": "string",
                    "example": "+254722000000"
                },
                "role": {
                    "type": "string",
                    "example": "USER"
                }
            }
        },
        "routes.HTTPError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "routes.Product": {
            "type": "object",
            "required": [
                "brand",
                "category",
                "description",
                "name",
                "price",
                "quantity",
                "sub-category"
            ],
            "properties": {
                "brand": {
                    "type": "string",
                    "example": "J\u0026J"
                },
                "category": {
                    "type": "string",
                    "example": "Antibiotics"
                },
                "description": {
                    "type": "string",
                    "example": "product description"
                },
                "id": {
                    "type": "string",
                    "example": "f183e73c-687d-44ad-83e6-636ecbb7a7d8"
                },
                "name": {
                    "type": "string",
                    "example": "Amoxilin"
                },
                "price": {
                    "type": "number",
                    "example": 300
                },
                "quantity": {
                    "type": "integer",
                    "example": 1000
                },
                "sub-category": {
                    "type": "string",
                    "example": "Mild"
                }
            }
        },
        "routes.User": {
            "type": "object",
            "required": [
                "email",
                "name",
                "password",
                "phone"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "jane.doe@example.com"
                },
                "id": {
                    "type": "string",
                    "example": "42cef6ad-1b39-4708-aa3f-a0c485f70db3"
                },
                "name": {
                    "type": "string",
                    "example": "Jane Doe"
                },
                "password": {
                    "type": "string",
                    "example": "12345"
                },
                "phone": {
                    "type": "string",
                    "example": "+254722000000"
                },
                "role": {
                    "type": "string",
                    "example": "USER"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:9090",
	BasePath:         "/api/v1",
	Schemes:          []string{"http"},
	Title:            "ChemistKe API",
	Description:      "API endpoint documentation for the ChemistKe api project.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
