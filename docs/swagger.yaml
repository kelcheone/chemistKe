basePath: /api/v1
definitions:
  authservice.ErrResponse:
    properties:
      message:
        description: Error message
        example: invalid credentials
        type: string
    type: object
  authservice.LoginRequest:
    properties:
      id:
        description: User ID
        example: 1bf447b8-a129-42a2-b11e-684a801568ff
        type: string
      password:
        description: User password
        example: securepassword123
        type: string
    type: object
  authservice.LoginResponse:
    properties:
      token:
        description: JWT authentication token
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        type: string
    type: object
  product_proto.UploadProdctImagesResponse:
    properties:
      message:
        type: string
    type: object
  routes.DeleteUserResponse:
    properties:
      message:
        example: User deleted successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  routes.ErrResponse:
    properties:
      error:
        type: string
    type: object
  routes.GetUserResponse:
    properties:
      email:
        example: jane.doe@example.com
        type: string
      id:
        example: cef6ad-1b39-4708-aa3f-a0c485f70db3
        type: string
      name:
        example: Jane Doe
        type: string
      phone:
        example: "+254722000000"
        type: string
      role:
        example: USER
        type: string
    type: object
  routes.HTTPError:
    properties:
      error:
        type: string
    type: object
  routes.Product:
    properties:
      brand:
        example: J&J
        type: string
      category:
        example: Antibiotics
        type: string
      description:
        example: product description
        type: string
      id:
        example: f183e73c-687d-44ad-83e6-636ecbb7a7d8
        type: string
      name:
        example: Amoxilin
        type: string
      price:
        example: 300
        type: number
      quantity:
        example: 1000
        type: integer
      sub-category:
        example: Mild
        type: string
    required:
    - brand
    - category
    - description
    - name
    - price
    - quantity
    - sub-category
    type: object
  routes.User:
    properties:
      email:
        example: jane.doe@example.com
        type: string
      id:
        example: 42cef6ad-1b39-4708-aa3f-a0c485f70db3
        type: string
      name:
        example: Jane Doe
        type: string
      password:
        example: "12345"
        type: string
      phone:
        example: "+254722000000"
        type: string
      role:
        example: USER
        type: string
    required:
    - email
    - name
    - password
    - phone
    type: object
host: localhost:9090
info:
  contact:
    email: Support@chemist.co.ke
    name: ChemistKe Support
    url: https://chemist.co.ke/support
  description: API endpoint documentation for the ChemistKe api project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: ChemistKe API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates a user and returns a JWT token
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authservice.LoginRequest'
      produces:
      - application/json
      responses:
        "202":
          description: Successfully authenticated
          schema:
            $ref: '#/definitions/authservice.LoginResponse'
        "400":
          description: Bad request - invalid input
          schema:
            $ref: '#/definitions/authservice.ErrResponse'
        "401":
          description: Unauthorized - invalid credentials
          schema:
            $ref: '#/definitions/authservice.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/authservice.ErrResponse'
      summary: User login
      tags:
      - Authentication
  /products:
    get:
      consumes:
      - application/json
      description: Get products based on page and limit
      parameters:
      - description: PaginationRequest Page
        in: query
        name: page
        required: true
        type: integer
      - description: PaginationRequest Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/routes.Product'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      summary: Get products
      tags:
      - Products
    patch:
      consumes:
      - application/json
      description: update a given product
      parameters:
      - description: Product information to create
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/routes.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/routes.Product'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      security:
      - BearerAuth: []
      summary: Update a  product
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product information to create
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/routes.Product'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/routes.Product'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      security:
      - BearerAuth: []
      summary: Creates a new Product
      tags:
      - Products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product based on a given id
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/routes.Product'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Products
    get:
      consumes:
      - application/json
      description: Get a product by product ID
      parameters:
      - description: Product Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/routes.Product'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      summary: Get product by ID
      tags:
      - Products
  /products/get-products-by-brand:
    get:
      consumes:
      - application/json
      description: Get products based on a given brand name
      parameters:
      - description: ProductReq Brand
        in: query
        name: brand
        required: true
        type: string
      - description: ProductReq Page
        in: query
        name: page
        required: true
        type: integer
      - description: ProductReq Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/routes.Product'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      summary: Get products based on brand
      tags:
      - Products
  /products/get-products-by-category:
    get:
      consumes:
      - application/json
      description: Get products based on a givne Category
      parameters:
      - description: ProductReq Category
        in: query
        name: category
        required: true
        type: string
      - description: ProductReq Page
        in: query
        name: page
        required: true
        type: integer
      - description: ProductReq Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/routes.Product'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      summary: Get products Based on a category
      tags:
      - Products
  /products/get-products-by-sub-category:
    get:
      consumes:
      - application/json
      description: Get products based on a given sub-category, page, and limit
      parameters:
      - description: ProductReq SubCategory
        in: query
        name: sub-category
        required: true
        type: string
      - description: ProductReq Page
        in: query
        name: page
        required: true
        type: integer
      - description: ProductReq Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/routes.Product'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      summary: Get products based on a sub-category
      tags:
      - Products
  /products/images/{id}:
    get:
      consumes:
      - application/json
      description: Get the images of a given product id
      parameters:
      - description: Product id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/routes.Product'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      summary: a product's images
      tags:
      - Products
  /products/images/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image for a given product using multipart/form-data.
      parameters:
      - description: Product ID
        in: formData
        name: product-id
        required: true
        type: string
      - description: Type of the image (e.g. thumbnail, banner, general)
        in: formData
        name: image-type
        type: string
      - description: Image file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successfully uploaded image
          schema:
            $ref: '#/definitions/product_proto.UploadProdctImagesResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.ErrResponse'
      security:
      - BearerAuth: []
      summary: Upload a product image
      tags:
      - Products
  /users:
    delete:
      consumes:
      - application/json
      description: Delete an existing user
      parameters:
      - description: User ID to delete
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/routes.User'
      produces:
      - application/json
      responses:
        "202":
          description: Successfully deleted user
          schema:
            $ref: '#/definitions/routes.DeleteUserResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.ErrResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/routes.ErrResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.ErrResponse'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Delete a user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get a list of all users
      parameters:
      - description: PaginationRequest Page
        in: query
        name: page
        required: true
        type: integer
      - description: PaginationRequest Limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved users
          schema:
            items:
              $ref: '#/definitions/routes.GetUserResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
    patch:
      consumes:
      - application/json
      description: Update existing user information
      parameters:
      - description: Updated user information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/routes.User'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user
          schema:
            $ref: '#/definitions/routes.GetUserResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      security:
      - ApiKeyAuth: []
      - BearerAuth: []
      summary: Update user details
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Register a new user to the system
      parameters:
      - description: User information to create
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/routes.User'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created user
          schema:
            $ref: '#/definitions/routes.GetUserResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      summary: Create a new user
      tags:
      - Users
  /users/get-user:
    get:
      consumes:
      - application/json
      description: Get user details by user ID
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/routes.GetUserResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      summary: Get a user by ID
      tags:
      - Users
  /users/get-user-by-email:
    get:
      consumes:
      - application/json
      description: Get user details by email address
      parameters:
      - description: User Email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/routes.GetUserResponse'
        "400":
          description: Invalid input data
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/routes.HTTPError'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/routes.HTTPError'
      summary: Get a user by email
      tags:
      - Users
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization:
      Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
